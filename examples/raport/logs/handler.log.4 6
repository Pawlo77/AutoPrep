2025-01-09 17:17:19 INFO auto_prep.modeling.handler: [{'params': '{"weights": "distance", "p": 1, "n_neighbors": 15, "leaf_size": 30, "algorithm": "brute"}', 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.001640637715657552, 'std_fit_time': 0.0003883157943912885, 're-training time': 0.0002651214599609375, 'name': 'ModelKNeighboursClassifier', 'combined score (after re-training)': 0.995920213404222, 'test score (after re-training)': 0.7124529190207156, 'final pipeline name': 'final_pipeline_0.joblib'}, {'params': '{"weights": "distance", "p": 2, "n_neighbors": 10, "leaf_size": 40, "algorithm": "auto"}', 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0032208760579427085, 'std_fit_time': 0.0015908778874718131, 're-training time': 0.0005407333374023438, 'name': 'ModelKNeighboursClassifier', 'combined score (after re-training)': 0.995920213404222, 'test score (after re-training)': 0.7039783427495292, 'final pipeline name': 'final_pipeline_1.joblib'}, {'params': '{"weights": "uniform", "p": 2, "n_neighbors": 15, "leaf_size": 30, "algorithm": "kd_tree"}', 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0014234383900960286, 'std_fit_time': 0.0002455182260262492, 're-training time': 0.0005230903625488281, 'name': 'ModelKNeighboursClassifier', 'combined score (after re-training)': 0.7679075248371625, 'test score (after re-training)': 0.7764830508474576, 'final pipeline name': 'final_pipeline_2.joblib'}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.7, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.005160729090372722, 'std_fit_time': 0.0008564957816796669, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'newton-cg', 'penalty': 'l2', 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.005473772684733073, 'std_fit_time': 0.0011094714129173786, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.5, 'C': 0.01}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.002429485321044922, 'std_fit_time': 0.00024510241654606427, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'var_smoothing': 1e-09, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.001047372817993164, 'std_fit_time': 9.129179916788145e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-07, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.001096169153849284, 'std_fit_time': 0.00011776885695720843, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-05, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010856787363688152, 'std_fit_time': 0.0001022809838033875, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.006316582361857097, 'std_fit_time': 0.0012710692062032488, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'sigmoid', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.009688774744669596, 'std_fit_time': 0.0010213591900988426, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 3, 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.005783637364705403, 'std_fit_time': 0.0003665051345081266, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 5, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0016117095947265625, 'std_fit_time': 0.0002929210701653221, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'best', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_depth': 10, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0027033487955729165, 'std_fit_time': 7.831420281182367e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_depth': 15, 'criterion': 'entropy'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0016785462697347004, 'std_fit_time': 0.00019709554408686353, 'Preprocessing pipeline name': 'preprocessing_pipeline_0.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler())]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'weights': 'distance', 'p': 1, 'n_neighbors': 15, 'leaf_size': 30, 'algorithm': 'brute'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0009232362111409506, 'std_fit_time': 0.00016484276574721418, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'leaf_size': 40, 'algorithm': 'auto'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010877450307210286, 'std_fit_time': 6.166899324080423e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'weights': 'uniform', 'p': 2, 'n_neighbors': 15, 'leaf_size': 30, 'algorithm': 'kd_tree'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010990301767985027, 'std_fit_time': 2.6567243290549065e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.7, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0030156771341959634, 'std_fit_time': 0.00023816065612415757, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'newton-cg', 'penalty': 'l2', 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.00431513786315918, 'std_fit_time': 0.0007367993842680078, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.5, 'C': 0.01}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.002367417017618815, 'std_fit_time': 0.0002418655395536558, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'var_smoothing': 1e-09, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010176499684651692, 'std_fit_time': 3.134234676935931e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-07, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010592937469482422, 'std_fit_time': 0.00010047827542629781, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-05, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0009507338205973307, 'std_fit_time': 7.067742634335906e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0073451995849609375, 'std_fit_time': 0.0015194867399890206, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'sigmoid', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.014280875523885092, 'std_fit_time': 0.002561415650992044, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 3, 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.005698045094807942, 'std_fit_time': 0.001814074962300736, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 5, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0013489723205566406, 'std_fit_time': 9.425889907473997e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'best', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_depth': 10, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0033342838287353516, 'std_fit_time': 0.0004756491883178072, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_depth': 15, 'criterion': 'entropy'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0021562576293945312, 'std_fit_time': 0.0006682794376303146, 'Preprocessing pipeline name': 'preprocessing_pipeline_1.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='minmax'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'weights': 'distance', 'p': 1, 'n_neighbors': 15, 'leaf_size': 30, 'algorithm': 'brute'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0012900829315185547, 'std_fit_time': 0.00019663747264137333, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'weights': 'distance', 'p': 2, 'n_neighbors': 10, 'leaf_size': 40, 'algorithm': 'auto'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0013306140899658203, 'std_fit_time': 5.4300845510432276e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'weights': 'uniform', 'p': 2, 'n_neighbors': 15, 'leaf_size': 30, 'algorithm': 'kd_tree'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0014731884002685547, 'std_fit_time': 0.00016938830476458276, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_KNeighboursClassifier.ModelKNeighboursClassifier'>}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.7, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.009208361307779947, 'std_fit_time': 0.0007817006149729804, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'newton-cg', 'penalty': 'l2', 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.006479104359944661, 'std_fit_time': 0.0025118644992457133, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'solver': 'saga', 'penalty': 'elasticnet', 'l1_ratio': 0.5, 'C': 0.01}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.004244486490885417, 'std_fit_time': 0.0002418584888285904, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_LogisticRegression.ModelLogisticRegression'>}, {'params': {'var_smoothing': 1e-09, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0010184446970621746, 'std_fit_time': 8.532328505286386e-05, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-07, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0012364387512207031, 'std_fit_time': 0.00036778495657811854, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'var_smoothing': 1e-05, 'priors': None}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0015479723612467449, 'std_fit_time': 0.0005154566794550425, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_GaussianNaiveClassifier.ModelGaussianNaiveClassifier'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.00684507687886556, 'std_fit_time': 0.002395817835185578, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'sigmoid', 'gamma': 'auto', 'degree': 5, 'C': 1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.009969234466552734, 'std_fit_time': 0.0008450066381966758, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'random_state': 42, 'kernel': 'linear', 'gamma': 'auto', 'degree': 3, 'C': 0.1}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.006487687428792317, 'std_fit_time': 0.0016272392296888334, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_SVC.ModelSVC'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 5, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.00130462646484375, 'std_fit_time': 0.00016651974672723753, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'best', 'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_depth': 10, 'criterion': 'gini'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.004025061925252278, 'std_fit_time': 0.0008848281569308453, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}, {'params': {'splitter': 'random', 'random_state': 42, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_depth': 15, 'criterion': 'entropy'}, 'mean_test_score': nan, 'std_test_score': nan, 'mean_fit_time': 0.0019106864929199219, 'std_fit_time': 0.0004393280530006943, 'Preprocessing pipeline name': 'preprocessing_pipeline_2.joblib', 'Preprocessing pipeline': Pipeline(steps=[('NAImputer', NAImputer()), ('UniqueFilter', UniqueFilter()),
                ('ColumnEncoder', ColumnEncoder()),
                ('VarianceFilter', VarianceFilter()),
                ('CorrelationFilter', CorrelationFilter()),
                ('ColumnScaler', ColumnScaler(method='robust'))]), 'Model cls': <class 'auto_prep.modeling.model_DecisionTreeClassifier.ModelDecisionTreeClassifier'>}]
